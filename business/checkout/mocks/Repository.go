// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	checkout "AltaStore/business/checkout"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetAllCheckout provides a mock function with given fields:
func (_m *Repository) GetAllCheckout() (*[]checkout.Checkout, error) {
	ret := _m.Called()

	var r0 *[]checkout.Checkout
	if rf, ok := ret.Get(0).(func() *[]checkout.Checkout); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]checkout.Checkout)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckoutById provides a mock function with given fields: id
func (_m *Repository) GetCheckoutById(id string) (*checkout.Checkout, error) {
	ret := _m.Called(id)

	var r0 *checkout.Checkout
	if rf, ok := ret.Get(0).(func(string) *checkout.Checkout); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*checkout.Checkout)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckoutByShoppingCartId provides a mock function with given fields: cartid
func (_m *Repository) GetCheckoutByShoppingCartId(cartid string) (bool, error) {
	ret := _m.Called(cartid)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(cartid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cartid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCheckoutShoppingCart provides a mock function with given fields: _a0
func (_m *Repository) NewCheckoutShoppingCart(_a0 *checkout.Checkout) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*checkout.Checkout) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
