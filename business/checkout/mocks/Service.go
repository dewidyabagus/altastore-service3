// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	checkout "AltaStore/business/checkout"

	mock "github.com/stretchr/testify/mock"

	snap "github.com/midtrans/midtrans-go/snap"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetAllCheckout provides a mock function with given fields:
func (_m *Service) GetAllCheckout() (*[]checkout.Checkout, error) {
	ret := _m.Called()

	var r0 *[]checkout.Checkout
	if rf, ok := ret.Get(0).(func() *[]checkout.Checkout); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]checkout.Checkout)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckoutById provides a mock function with given fields: id
func (_m *Service) GetCheckoutById(id string) (*checkout.CheckItemDetails, error) {
	ret := _m.Called(id)

	var r0 *checkout.CheckItemDetails
	if rf, ok := ret.Get(0).(func(string) *checkout.CheckItemDetails); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*checkout.CheckItemDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCheckoutShoppingCart provides a mock function with given fields: userid, _a1
func (_m *Service) NewCheckoutShoppingCart(userid string, _a1 *checkout.Checkout) (*snap.Response, error) {
	ret := _m.Called(userid, _a1)

	var r0 *snap.Response
	if rf, ok := ret.Get(0).(func(string, *checkout.Checkout) *snap.Response); ok {
		r0 = rf(userid, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*snap.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *checkout.Checkout) error); ok {
		r1 = rf(userid, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
