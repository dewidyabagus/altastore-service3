// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	checkoutpayment "AltaStore/business/checkoutpayment"

	mock "github.com/stretchr/testify/mock"

	snap "github.com/midtrans/midtrans-go/snap"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GenerateSnapPayment provides a mock function with given fields: customerId, checkoutId, amount
func (_m *Service) GenerateSnapPayment(customerId string, checkoutId string, amount int64) (*snap.Response, error) {
	ret := _m.Called(customerId, checkoutId, amount)

	var r0 *snap.Response
	if rf, ok := ret.Get(0).(func(string, string, int64) *snap.Response); ok {
		r0 = rf(customerId, checkoutId, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*snap.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int64) error); ok {
		r1 = rf(customerId, checkoutId, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentByCheckoutId provides a mock function with given fields: id
func (_m *Service) GetPaymentByCheckoutId(id string) (*checkoutpayment.CheckoutPayment, error) {
	ret := _m.Called(id)

	var r0 *checkoutpayment.CheckoutPayment
	if rf, ok := ret.Get(0).(func(string) *checkoutpayment.CheckoutPayment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*checkoutpayment.CheckoutPayment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPayment provides a mock function with given fields: payment, creator
func (_m *Service) InsertPayment(payment *checkoutpayment.InserPaymentSpec, creator string) (*checkoutpayment.InserPaymentSpec, error) {
	ret := _m.Called(payment, creator)

	var r0 *checkoutpayment.InserPaymentSpec
	if rf, ok := ret.Get(0).(func(*checkoutpayment.InserPaymentSpec, string) *checkoutpayment.InserPaymentSpec); ok {
		r0 = rf(payment, creator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*checkoutpayment.InserPaymentSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*checkoutpayment.InserPaymentSpec, string) error); ok {
		r1 = rf(payment, creator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
