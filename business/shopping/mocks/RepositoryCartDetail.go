// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	shoppingdetail "AltaStore/modules/shoppingdetail"
)

// RepositoryCartDetail is an autogenerated mock type for the RepositoryCartDetail type
type RepositoryCartDetail struct {
	mock.Mock
}

// DeleteItemInShopCart provides a mock function with given fields: cartId, productid
func (_m *RepositoryCartDetail) DeleteItemInShopCart(cartId string, productid string) error {
	ret := _m.Called(cartId, productid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(cartId, productid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetShopCartDetailById provides a mock function with given fields: id
func (_m *RepositoryCartDetail) GetShopCartDetailById(id string) (*[]shoppingdetail.ShopCartDetailItemWithProductName, error) {
	ret := _m.Called(id)

	var r0 *[]shoppingdetail.ShopCartDetailItemWithProductName
	if rf, ok := ret.Get(0).(func(string) *[]shoppingdetail.ShopCartDetailItemWithProductName); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]shoppingdetail.ShopCartDetailItemWithProductName)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyItemInShopCart provides a mock function with given fields: cartId, item
func (_m *RepositoryCartDetail) ModifyItemInShopCart(cartId string, item *shoppingdetail.UpdateItemInCartSpec) error {
	ret := _m.Called(cartId, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *shoppingdetail.UpdateItemInCartSpec) error); ok {
		r0 = rf(cartId, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewItemInShopCart provides a mock function with given fields: cartId, item
func (_m *RepositoryCartDetail) NewItemInShopCart(cartId string, item *shoppingdetail.InsertItemInCartSpec) error {
	ret := _m.Called(cartId, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *shoppingdetail.InsertItemInCartSpec) error); ok {
		r0 = rf(cartId, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
